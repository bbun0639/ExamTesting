@using ExamTesting.Models
@model  ExamTesting.Models.Question

@{
    ViewData["Title"] = "Question Choices";
}

@*<h2 class="pb-4 text-center font-weight-light">Add Question Choices</h2>*@

<form method="post">
    <div id="form-container" class="row" >
        <div class="col">
            
            <div class="p-4 bg-light rounded">
            @(Html.DevExtreme().Form<ExamTesting.Models.Question>()
                .ID("form")
                       

                .Items(items => {
                    items.AddGroup()
                        .Caption("Question Info")
                        .ColCount(2)

                        .Items(groupItems =>
                        {

                            groupItems.AddSimpleFor(m => m.QuestionStr)
                            .ColSpan(2)
                            .Editor(e => e
                                .TextArea()
                                .Height(75)
                            )
                            .ValidationRules(r => r
                                .AddRequired()
                                .Message("Question is required")
                            );

                            groupItems.AddSimpleFor(m => m.TopicId)
                            .ColSpan(2)
                            .Editor(e => e
                                .DropDownBox()
                                .DropDownOptions(o => o.Height(250))
                                .DataSource(d => d.Mvc().Controller("Question").LoadAction("GetTopicDropdown").Key("TopicId"))
                                .DisplayExpr("TopicName").ValueExpr("TopicId")
                                .Placeholder("Select a value...")
                                .ShowClearButton(true)
                                .OnValueChanged("treeBox_valueChanged")
                                .ContentTemplate(new TemplateName("EmbeddedTreeViewMultiple"))
                            );


                            groupItems.AddSimpleFor(m => m.QuestionType)
                            .ColSpan(1)
                            .Editor(e => e
                                .SelectBox()
                                .DataSource(Html.GetEnumSelectList<QuestionType>()
                                            .Select(l => new { Value = int.Parse(l.Value), Text = l.Text }))
                                            .ValueExpr("Value")
                                            .DisplayExpr("Text")
                                );


                            groupItems.AddSimpleFor(m => m.QuestionLevel)
                            .ColSpan(1)
                            .Editor(e => e
                                .SelectBox()
                                .DataSource(Html.GetEnumSelectList<EnumLevel>()
                                            .Select(l => new { Value = int.Parse(l.Value), Text = l.Text }))
                                            .ValueExpr("Value")
                                            .DisplayExpr("Text")
                                );
                                                        
                            groupItems.AddSimpleFor(m => m.QuestionPoint)
                            .ColSpan(2)
                                .Editor(e => e
                                .NumberBox()
                                .Min(0)
                                .Max(100)
                                .ShowSpinButtons(true)
                                .Placeholder("0-100")
                            );

                            groupItems.AddSimpleFor(m => m.Hint)
                            .ColSpan(2)
                            .Editor(e => e
                                .TextArea()
                                .Height(75)
                            );
                            
                        });
                })

                .FormData(Model)
            )
            </div>


            <div class="p-4">
                @(Html.DevExtreme().Form<ExamTesting.Models.Question>()
                    .ID("form-point")
                    .ColCount(1)
                    .Items(items =>
                    {
                        items.AddGroup()
                            .Caption("Add Choices");
                    })

                )

                <partial name="_QuestionChoices" />

                <div class="row pt-4">
                    <div class="text-left col">
                        @(Html.DevExtreme().Button()
                            .Type(ButtonType.Back)
                            .Icon("back")
                            .OnClick("Back")
                        )
                    </div>

                    <div class="text-right col">
                        @(Html.DevExtreme().Button()
                            .Type(ButtonType.Default)            
                            .Text("Submit")
                            .Icon("check")
                            .OnClick("Submit")
                            .UseSubmitBehavior(true)
                        )
                    </div>
                </div>

            </div>
        </div>
    
        <div id="col-light" class="col-3 bg-light"></div>

    </div>

    @using (Html.DevExtreme().NamedTemplate("EmbeddedTreeViewMultiple"))
        {
                @(Html.DevExtreme().TreeView()
                .DataSource(new JS(@"component.option(""dataSource"")"))
                .KeyExpr("TopicId")
                .DisplayExpr("TopicName")
                .ItemsExpr("Items")
                .ExpandedExpr("Expanded")
                .ParentIdExpr("ParentId")
                .DataStructure(TreeViewDataStructure.Plain)
                .SelectionMode(NavSelectionMode.Multiple)
                .ShowCheckBoxesMode(TreeViewCheckBoxMode.Normal)
                .SelectNodesRecursive(false)
                .SelectByClick(true)
                .Height(235)
                .OnItemSelectionChanged(
                    @<text>
                            function(args) {
                                var nodes = args.component.getNodes(),
                                    value = getSelectedItemsKeys(nodes);

                                component.option("value", value);
                            }
                    </text>)

                .OnContentReady(
                    @<text>
                            function(args) {
                                syncTreeViewSelection(args.component, component.option("value"));
                            }
                    </text>)
                )
            }


</form>


<script>
//Ezy dropdown
    function innerList_selectionChanged(e) {
        var dropDownBox = $("#dropDownBox").dxDropDownBox("instance");
        dropDownBox.option("value", e.addedItems[0]);
        dropDownBox.close();
    }

//Button Back
    function Back() {
        window.location.href = "@Url.Action("Index","Questions")";
    }

    function Submit() {
        window.location.href = "@Url.Action("Index")";
        //alert("Already Update!")
    }



//Func tree view box
    function syncTreeViewSelection(treeView, value) {
        if (!value) {
            treeView.unselectAll();
            return;
        }

        value.forEach(function (key) {
            treeView.selectItem(key);
        });
    }

    function getSelectedItemsKeys(items) {
        var result = [];
        items.forEach(function (item) {
            if (item.selected) {
                result.push(item.key);
            }
            if (item.items.length) {
                result = result.concat(getSelectedItemsKeys(item.items));
            }
        });
        return result;
    }

    function treeBox_valueChanged(e) {
        var $treeView = e.component.content().find(".dx-treeview");
        if($treeView.length) {
            syncTreeViewSelection($treeView.dxTreeView("instance"), e.value);
        }
    }

    function gridBox_valueChanged(e) {
        var $dataGrid = $("#embedded-datagrid");

        if ($dataGrid.length) {
            var dataGrid = $dataGrid.dxDataGrid("instance");
            dataGrid.selectRows(e.value, false);
        }
    }

</script>


