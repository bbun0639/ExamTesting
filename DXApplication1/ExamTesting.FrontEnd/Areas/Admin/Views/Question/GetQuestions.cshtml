@using ExamTesting.Models

@{
    ViewData["Title"] = "Questions";
}

<h2 class="pb-4 text-center font-weight-light">Questions</h2>

<div class="card p-5 shadow p-3 mb-5 bg-white rounded" id="questions-grid">

    @(Html.DevExtreme().Button()
    .ID("gridDeleteSelected")
    .Text("Delete Selected Records")
    .Height(34)
    .Width(195)
    .Disabled(false)
    .Type(ButtonType.Danger)
    .OnClick(
        
        @<script>
            function () {
                var dataGrid = $("#gridContainer").dxDataGrid("instance");
                $.when.apply($, dataGrid.getSelectedRowsData().map(function(data) {
                return dataGrid.getDataSource().store().remove(data.SubjectId);
                })).done(function() {
                dataGrid.refresh();
                });
            }
        </script>
        )
    )


    @(Html.DevExtreme().DataGrid<ExamTesting.Models.Question>()
        .DataSource( d => d.Mvc()
            .Controller("Question")
            .LoadAction("Get")
            .UpdateAction("Put")
            .InsertAction("Post")
            .DeleteAction("Delete")
            .Area("Admin")
            .Key("QuestionId")
            )

        .ID("gridContainer")
        .Editing(editing => editing

            .Mode(GridEditMode.Form)
            .AllowAdding(true)
            .AllowDeleting(true)
            .AllowUpdating(true)
        )

        .FilterRow(filterRow => filterRow
            .Visible(true)
            .ApplyFilter(GridApplyFilterMode.Auto)
        )

        .SearchPanel(searchPanel => searchPanel
            .Visible(true)
            .Width(240)
            .Placeholder("Search...")
        )

        .Selection(selection => selection
            .Mode(SelectionMode.Multiple)
        )

        .OnSelectionChanged(
                @<script>
                    function(data) {
                        var deleteButton = $("#gridDeleteSelected").dxButton("instance");
                        deleteButton.option("disabled", !data.selectedRowsData.length);
                    }
                </script>
        )

        .HeaderFilter(headerFilter => headerFilter.Visible(true))
            .Columns(columns =>
            {
                columns.Add().DataField("QuestionStr").Caption("Question")
                    .CellTemplate(@<text>
                                <a 
                                   href="@Url.Action("GetQuestionChoices")/<%= data.QuestionId %>"><%= data.QuestionStr %>
                                </a>
                        </text>);

                columns.Add().DataField("Hint").Caption("Hint");

                columns.Add().DataField("QuestionType").Caption("Question Type")

                    .Lookup(lookup => lookup.DataSource(Html.GetEnumSelectList<QuestionType>()
                                .Select(l => new { Value = int.Parse(l.Value), Text = l.Text }))
                                .ValueExpr("Value")
                                .DisplayExpr("Text")
                            )

                    .FormItem(i => i
                        .Editor(e => e.SelectBox()
                            .ID("QuestionType")
                            .DataSource(Html.GetEnumSelectList<QuestionType>()
                                .Select(l => new { Value = int.Parse(l.Value), Text = l.Text }))
                            .ValueExpr("Value")
                            .DisplayExpr("Text")
                            )
                        );

                columns.Add().DataField("QuestionLevel").Caption("Question Level")

                    .Lookup(lookup => lookup.DataSource(Html.GetEnumSelectList<EnumLevel>()
                                .Select(l => new { Value = int.Parse(l.Value), Text = l.Text }))
                                .ValueExpr("Value")
                                .DisplayExpr("Text")
                            )

                    .FormItem(i => i
                        .Editor(e => e.SelectBox()
                            .ID("QuestionLevel")
                            .DataSource(Html.GetEnumSelectList<EnumLevel>()
                                .Select(l => new { Value = int.Parse(l.Value), Text = l.Text }))
                            .ValueExpr("Value")
                            .DisplayExpr("Text")
                            )
                        );
                
                                             
            })
            .ShowBorders(true)

    


)

<p class="text-danger pt-3">
    <i>/*Click any question to add choices</i>
</p>

</div>
