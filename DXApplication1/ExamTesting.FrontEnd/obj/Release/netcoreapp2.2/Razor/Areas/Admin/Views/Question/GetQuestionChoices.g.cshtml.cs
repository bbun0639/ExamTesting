#pragma checksum "D:\TraineePROJ\Proj 5 ExamTesting\ExamTesting\DXApplication1\ExamTesting.FrontEnd\Areas\Admin\Views\Question\GetQuestionChoices.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "669630644be6eba22b6fd2c02b00708aab35d00d"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Areas_Admin_Views_Question_GetQuestionChoices), @"mvc.1.0.view", @"/Areas/Admin/Views/Question/GetQuestionChoices.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Areas/Admin/Views/Question/GetQuestionChoices.cshtml", typeof(AspNetCore.Areas_Admin_Views_Question_GetQuestionChoices))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "D:\TraineePROJ\Proj 5 ExamTesting\ExamTesting\DXApplication1\ExamTesting.FrontEnd\Areas\Admin\Views\_ViewImports.cshtml"
using ExamTesting_FrontEnd;

#line default
#line hidden
#line 3 "D:\TraineePROJ\Proj 5 ExamTesting\ExamTesting\DXApplication1\ExamTesting.FrontEnd\Areas\Admin\Views\_ViewImports.cshtml"
using DevExtreme.AspNet.Mvc;

#line default
#line hidden
#line 1 "D:\TraineePROJ\Proj 5 ExamTesting\ExamTesting\DXApplication1\ExamTesting.FrontEnd\Areas\Admin\Views\Question\GetQuestionChoices.cshtml"
using ExamTesting.Models;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"669630644be6eba22b6fd2c02b00708aab35d00d", @"/Areas/Admin/Views/Question/GetQuestionChoices.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"ff0bbdc15d68186c6ba41cb7fb4752922ee8bab0", @"/Areas/Admin/Views/_ViewImports.cshtml")]
    public class Areas_Admin_Views_Question_GetQuestionChoices : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<ExamTesting.Models.Question>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            BeginContext(64, 2, true);
            WriteLiteral("\r\n");
            EndContext();
#line 4 "D:\TraineePROJ\Proj 5 ExamTesting\ExamTesting\DXApplication1\ExamTesting.FrontEnd\Areas\Admin\Views\Question\GetQuestionChoices.cshtml"
  
    ViewData["Title"] = "Question Choices";

#line default
#line hidden
            BeginContext(118, 209, true);
            WriteLiteral("\r\n<h2 class=\"pb-4 text-center font-weight-light\">Question Choices</h2>\r\n\r\n<div id=\"form-container\" class=\"row\">\r\n\r\n    <div class=\"card p-5 shadow p-3 mb-5 bg-white rounded col\" style=\"width:550px;\">\r\n        ");
            EndContext();
            BeginContext(329, 2229, false);
#line 13 "D:\TraineePROJ\Proj 5 ExamTesting\ExamTesting\DXApplication1\ExamTesting.FrontEnd\Areas\Admin\Views\Question\GetQuestionChoices.cshtml"
    Write(Html.DevExtreme().Form<ExamTesting.Models.Question>()
            .ID("form")
            .ColCount(1)
                       

            .Items(items => {
                items.AddGroup()
                    .Caption("Question Info")

                    .Items(groupItems =>
                    {

                        groupItems.AddSimpleFor(m => m.QuestionStr)
                        .Editor(e => e
                            .TextArea()
                            .Height(75)
                        )
                        .ValidationRules(r => r
                            .AddRequired()
                            .Message("Question is required")
                        );


                        groupItems.AddSimpleFor(m => m.Hint)
                        .Editor(e => e
                            .TextArea()
                            .Height(75)
                        );

                        groupItems.AddSimpleFor(m => m.QuestionType)
                        .Editor(e => e
                            .SelectBox()
                            .DataSource(Html.GetEnumSelectList<QuestionType>()
                                        .Select(l => new { Value = int.Parse(l.Value), Text = l.Text }))
                                        .ValueExpr("Value")
                                        .DisplayExpr("Text")
                            );


                        groupItems.AddSimpleFor(m => m.QuestionLevel)
                        .Editor(e => e
                            .SelectBox()
                            .DataSource(Html.GetEnumSelectList<EnumLevel>()
                                        .Select(l => new { Value = int.Parse(l.Value), Text = l.Text }))
                                        .ValueExpr("Value")
                                        .DisplayExpr("Text")
                            );
                    });
            })


            .OnContentReady(
                    item => new global::Microsoft.AspNetCore.Mvc.Razor.HelperResult(async(__razor_template_writer) => {
    PushWriter(__razor_template_writer);
    BeginContext(2346, 170, true);
    WriteLiteral("<script>\r\n                            function(e) {\r\n                                e.component.validate();\r\n                            }\r\n                    </script>");
    EndContext();
    PopWriter();
}
))

            .FormData(Model)
        );

#line default
#line hidden
            EndContext();
            BeginContext(2560, 159, true);
            WriteLiteral("\r\n\r\n    </div>\r\n    \r\n    \r\n    <div class=\"col-1\"></div>\r\n\r\n\r\n    <div class=\"card p-5 shadow p-3 mb-5 bg-white rounded col\" style=\"width:550px;\">\r\n\r\n        ");
            EndContext();
            BeginContext(2721, 2062, false);
#line 82 "D:\TraineePROJ\Proj 5 ExamTesting\ExamTesting\DXApplication1\ExamTesting.FrontEnd\Areas\Admin\Views\Question\GetQuestionChoices.cshtml"
    Write(Html.DevExtreme().Form<ExamTesting.Models.Question>()
            .ID("form-point")
            .ColCount(1)
            .Items(items =>
            {
                items.AddGroup()
                    .Caption("Select More")
                    .Items(groupItems =>
                    {
                        groupItems.AddSimpleFor(m => m.QuestionPoint)
                        .Editor(e => e
                            .NumberBox()
                            .Min(0)
                            .Max(100)
                            .ShowSpinButtons(true)
                            .Placeholder("0-100")
                        )
                        .ValidationRules(r => r
                            .AddRequired()
                            .Message("Question Point is required")
                        );


                        //groupItems.AddSimpleFor(m => m.TopicId)
                        //.Editor(e => e.Lookup()
                        //    .DataSource(d => d.Mvc()
                        //    .Controller("Question")
                        //    .LoadAction("GetTopicDropdown")
                        //    .Key("TopicId"))
                        //        .DisplayExpr("TopicName")
                        //        .ValueExpr("TopicId"));

                        groupItems.AddSimpleFor(m => m.TopicId)
                        .Editor(e => e
                            .DropDownBox()
                            .DropDownOptions(o => o.Height(350))
                            .DataSource(d => d.Mvc().Controller("Question").LoadAction("GetTopicDropdown").Key("TopicId")).DisplayExpr("TopicName").ValueExpr("TopicId")
                            .Placeholder("Select a value...")
                            .ShowClearButton(true)
                            .OnValueChanged("treeBox_valueChanged")
                            .ContentTemplate(new TemplateName("EmbeddedTreeViewMultiple"))
                        );


                    });


            })

        );

#line default
#line hidden
            EndContext();
            BeginContext(4784, 147, true);
            WriteLiteral("\r\n\r\n        <div class=\"dx-field\">\r\n            <div class=\"dx-field-label\">Topic</div>\r\n            <div class=\"dx-field-value\">\r\n                ");
            EndContext();
            BeginContext(4933, 537, false);
#line 136 "D:\TraineePROJ\Proj 5 ExamTesting\ExamTesting\DXApplication1\ExamTesting.FrontEnd\Areas\Admin\Views\Question\GetQuestionChoices.cshtml"
            Write(Html.DevExtreme().DropDownBox()
                        .DropDownOptions(o => o.Height(400))
                        .DataSource(d => d.Mvc().Controller("Question").LoadAction("GetTopicDropdown").Key("TopicId")).DisplayExpr("TopicName").ValueExpr("TopicId")
                        .Placeholder("Select a value...")
                        .ShowClearButton(true)
                        .OnValueChanged("treeBox_valueChanged")
                        .ContentTemplate(new TemplateName("EmbeddedTreeViewMultiple"))
                );

#line default
#line hidden
            EndContext();
            BeginContext(5471, 6, true);
            WriteLiteral("\r\n\r\n\r\n");
            EndContext();
#line 146 "D:\TraineePROJ\Proj 5 ExamTesting\ExamTesting\DXApplication1\ExamTesting.FrontEnd\Areas\Admin\Views\Question\GetQuestionChoices.cshtml"
                 using (Html.DevExtreme().NamedTemplate("EmbeddedTreeViewMultiple"))
                {
                        

#line default
#line hidden
            BeginContext(5608, 1509, false);
#line 148 "D:\TraineePROJ\Proj 5 ExamTesting\ExamTesting\DXApplication1\ExamTesting.FrontEnd\Areas\Admin\Views\Question\GetQuestionChoices.cshtml"
                    Write(Html.DevExtreme().TreeView()
                        .DataSource(new JS(@"component.option(""dataSource"")"))
                        .KeyExpr("TopicId")
                        .DisplayExpr("TopicName")
                        .ItemsExpr("Items")
                        .ExpandedExpr("Expanded")
                        .ParentIdExpr("ParentId")
                        .DataStructure(TreeViewDataStructure.Plain)
                        .SelectionMode(NavSelectionMode.Multiple)
                        .ShowCheckBoxesMode(TreeViewCheckBoxMode.Normal)
                        .SelectNodesRecursive(false)
                        .SelectByClick(true)
                        .Height(235)
                        .OnItemSelectionChanged(
                            item => new global::Microsoft.AspNetCore.Mvc.Razor.HelperResult(async(__razor_template_writer) => {
    PushWriter(__razor_template_writer);
    BeginContext(6390, 379, true);
    WriteLiteral(@"<script>
                                    function(args) {
                                        var nodes = args.component.getNodes(),
                                            value = getSelectedItemsKeys(nodes);

                                        component.option(""value"", value);
                                    }
                            </script>");
    EndContext();
    PopWriter();
}
))

                        .OnContentReady(
                            item => new global::Microsoft.AspNetCore.Mvc.Razor.HelperResult(async(__razor_template_writer) => {
    PushWriter(__razor_template_writer);
    BeginContext(6845, 247, true);
    WriteLiteral("<script>\r\n                                    function(args) {\r\n                                        syncTreeViewSelection(args.component, component.option(\"value\"));\r\n                                    }\r\n                            </script>");
    EndContext();
    PopWriter();
}
))
                        );

#line default
#line hidden
            EndContext();
#line 177 "D:\TraineePROJ\Proj 5 ExamTesting\ExamTesting\DXApplication1\ExamTesting.FrontEnd\Areas\Admin\Views\Question\GetQuestionChoices.cshtml"
                         
                 }

#line default
#line hidden
            BeginContext(7142, 124, true);
            WriteLiteral("\r\n            </div>\r\n        </div>\r\n\r\n    </div>\r\n\r\n</div>\r\n\r\n<div class=\"row\">\r\n    <div class=\"text-left col\">\r\n        ");
            EndContext();
            BeginContext(7268, 101, false);
#line 189 "D:\TraineePROJ\Proj 5 ExamTesting\ExamTesting\DXApplication1\ExamTesting.FrontEnd\Areas\Admin\Views\Question\GetQuestionChoices.cshtml"
    Write(Html.DevExtreme().Button()
            .Type(ButtonType.Back).Icon("back").OnClick("Back")
        );

#line default
#line hidden
            EndContext();
            BeginContext(7370, 58, true);
            WriteLiteral("\r\n    </div>\r\n\r\n    <div class=\"text-right col\">\r\n        ");
            EndContext();
            BeginContext(7430, 104, false);
#line 195 "D:\TraineePROJ\Proj 5 ExamTesting\ExamTesting\DXApplication1\ExamTesting.FrontEnd\Areas\Admin\Views\Question\GetQuestionChoices.cshtml"
    Write(Html.DevExtreme().Button()
            .Type(ButtonType.Default).Icon("check").Text("Submit")
        );

#line default
#line hidden
            EndContext();
            BeginContext(7535, 340, true);
            WriteLiteral(@"
    </div>
</div>

<script>
    //Ezy dropdown
    function innerList_selectionChanged(e) {
        var dropDownBox = $(""#dropDownBox"").dxDropDownBox(""instance"");
        dropDownBox.option(""value"", e.addedItems[0]);
        dropDownBox.close();
    }

    //Button Back
    function Back() {
        window.location.href = """);
            EndContext();
            BeginContext(7876, 26, false);
#line 211 "D:\TraineePROJ\Proj 5 ExamTesting\ExamTesting\DXApplication1\ExamTesting.FrontEnd\Areas\Admin\Views\Question\GetQuestionChoices.cshtml"
                           Write(Url.Action("GetQuestions"));

#line default
#line hidden
            EndContext();
            BeginContext(7902, 1188, true);
            WriteLiteral(@""";
    }
         
    //Func tree view box
    function syncTreeViewSelection(treeView, value) {
        if (!value) {
            treeView.unselectAll();
            return;
        }

        value.forEach(function (key) {
            treeView.selectItem(key);
        });
    }

    function getSelectedItemsKeys(items) {
        var result = [];
        items.forEach(function (item) {
            if (item.selected) {
                result.push(item.key);
            }
            if (item.items.length) {
                result = result.concat(getSelectedItemsKeys(item.items));
            }
        });
        return result;
    }

    function treeBox_valueChanged(e) {
        var $treeView = e.component.content().find("".dx-treeview"");
        if($treeView.length) {
            syncTreeViewSelection($treeView.dxTreeView(""instance""), e.value);
        }
    }

    function gridBox_valueChanged(e) {
        var $dataGrid = $(""#embedded-datagrid"");

        if ($dataGri");
            WriteLiteral("d.length) {\r\n            var dataGrid = $dataGrid.dxDataGrid(\"instance\");\r\n            dataGrid.selectRows(e.value, false);\r\n        }\r\n    }\r\n\r\n\r\n\r\n</script>\r\n\r\n\r\n");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<ExamTesting.Models.Question> Html { get; private set; }
    }
}
#pragma warning restore 1591
